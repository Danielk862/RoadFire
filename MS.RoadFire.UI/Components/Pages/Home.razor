@page "/"
@using MS.RoadFire.Business.Models
@using MS.RoadFire.Common.Helpers
@using MS.RoadFire.UI.Repositories
@using System.Net;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage


<PageTitle>Inicio - Road Fire</PageTitle>

<div class="home-background">
    <MudPaper Class="login-card" Elevation="10">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6 font-bold">
            🏍️ Bienvenido a <strong>Road Fire</strong>
        </MudText>

        <EditForm Model="@loginModel" OnValidSubmit="Login">
            <MudTextField @bind-Value="loginModel.Username"
                          Label="Ingrese su cuenta o usuario"
                          Variant="Variant.Outlined"
                          Class="mb-4 input-rounded"
                          Required="true" />

            <MudTextField @bind-Value="loginModel.Password"
                          Label="Password"
                          InputType="InputType.Password"
                          Variant="Variant.Outlined"
                          Class="mb-4 input-rounded"
                          Required="true" />

@*             <MudSelect T="string"
                       Label="Seleccione su Rol"
                       @bind-Value="loginModel.Role"
                       Class="mb-6 input-rounded"
                       Required="true">
                <MudSelectItem Value="@RolAdmin"> Administrador</MudSelectItem>
                <MudSelectItem Value="@RolOperativo"> Operativo</MudSelectItem>
            </MudSelect> *@

            <MudButton Variant="Variant.Filled"
                       Color="Color.Warning"
                       Class="btn-ingresar"
                       ButtonType="ButtonType.Submit">
                INGRESAR
            </MudButton>
        </EditForm>

        @if (loginError is not null)
        {
            <MudText Typo="Typo.caption" Color="Color.Error" Align="Align.Center" Class="mt-2">
                @loginError
            </MudText>
        }
    </MudPaper>
</div>





@code {
    private LoginModel loginModel = new();
    private string? loginError;

    @inject ProtectedLocalStorage localStorage

    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private IRepository repository { get; set; } = default!;


    private async Task Login()
    {
        var url = $"api/Security/Login?username={loginModel.Username}&password={loginModel.Password}";

        var response = await repository.PostAsync<object, ResponseDto<UserDto>>(url, null!);

        if (!response.Error && response.Response != null && response.Response.Code == HttpStatusCode.OK)
        {
            var user = response.Response.Data;
            //var user = response.Response.Data!;

            if (user != null)
            {
                await localStorage.SetAsync("usuarioActual", user);
                Navigation.NavigateTo("/MenuAdmin");
            }
        }

        else
        {
            loginError = response.Response?.Messages ?? "Usuario o contraseña incorrectos.";
        }
    }


    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}

