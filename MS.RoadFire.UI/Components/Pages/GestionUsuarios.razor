@page "/GestionUsuarios"
@using MudBlazor
@using MS.RoadFire.Business.Models
@using MS.RoadFire.Common.Helpers
@using MS.RoadFire.UI.Repositories
@inject UsuariosRepository usuariosRepository
@inject RolesRepository rolesRepository
@inject IDialogService DialogService

<div class="home-background">
    <div class="admin-container">

        <!-- Botón Volver -->
        <div class="top-bar">
            <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="volver-btn" OnClick="Back">
                &lt; Volver
            </MudButton>
        </div>

        <!-- CONTENEDOR DE BOTONES -->
        <div class="acciones-container">
            <MudButton Variant="Variant.Filled" Color="Color.Warning" Class="btn-accion" OnClick="NewUser">Agregar Usuario</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" Class="btn-accion" Disabled="@(_seleccionado is null)" OnClick="UpdateUser">Modificar Usuario</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" Class="btn-accion" Disabled="@(_seleccionado is null)" OnClick="DeleteUser">Eliminar Usuario</MudButton>
        </div>

        <!-- 📊 TABLA -->
        <MudTable Items="@usuarios" Dense="true" Hover="true" Bordered="true" Elevation="2"
            @bind-SelectedItem="_seleccionado"
            RowClick="@((TableRowClickEventArgs<UserDto> e) => _seleccionado = e.Item)">
            <HeaderContent>
                <MudTh>ID Usuario</MudTh>
                <MudTh>Nombre Usuario</MudTh>
                <MudTh>ID Empleado</MudTh>
                <MudTh>ID Rol</MudTh>
                <MudTh>Rol</MudTh>
                <MudTh>Estado</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="ID Usuario">@context!.Id</MudTd>
                <MudTd DataLabel="Nombre Usuario">@context!.Username</MudTd>
                <MudTd DataLabel="ID Empleado">@context!.EmployeeId</MudTd>
                <MudTd DataLabel="ID Rol">@context!.RoleId</MudTd>
                <MudTd DataLabel="Rol">@GetRoleName(context!)</MudTd>
                <MudTd DataLabel="Estado">@(context!.State ? "Activo" : "Inactivo")</MudTd>
            </RowTemplate>
        </MudTable>


    </div>
</div>

@inject NavigationManager Navigation

@code {

    private List<UserDto> usuarios = new();
    private Dictionary<int, string> roleNames = new();

    protected override async Task OnInitializedAsync()
    {        
        var rr = await rolesRepository.GetAllAsync();
        roleNames = (!rr.Error && rr.Response?.Data != null)
            ? rr.Response.Data.ToDictionary(r => r.Id, r => r.Name)
            : new();

        await CargarUsuariosAsync();
    }

    //Para nombres de roles para evitar múltiples llamadas(Temporal no esta llegando de API/BD)

    private string GetRoleName(UserDto u)
    {
        if (string.IsNullOrWhiteSpace(u.RoleName) ||
            u.RoleName.Equals("string", StringComparison.OrdinalIgnoreCase))
            return roleNames.TryGetValue(u.RoleId, out var n) ? n : u.RoleId.ToString();

        return u.RoleName;
    }

    private async Task CargarUsuariosAsync()
    {
        var r = await usuariosRepository.GetAllAsync();

        usuarios = (!r.Error && r.Response?.Data != null)
            ? r.Response.Data
                .OrderByDescending(u => u.State) // Activos primero
                .ToList()
            : new List<UserDto>();
    }

    // Método para volver al menú anterior
    private void Back()
    {
        Navigation.NavigateTo("/MenuUsuarios");
    }
    // Método para crear un nuevo usuario

    private void NewUser()
    {
        Navigation.NavigateTo("/NuevoUsuario");
    }

    // Método para Modificar un usuario
    private UserDto? _seleccionado;

    private void UpdateUser()
    {
        if (_seleccionado is null) return;
        Navigation.NavigateTo($"/ActualizarUsuario/{_seleccionado.Id}");
    }

    // Método para eliminar un usuario
    private async Task DeleteUser()
    {
        if (_seleccionado is null) return;

        bool? ok = await DialogService.ShowMessageBox(
            "Confirmación",
            $"¿Esta seguro de eliminar el usuario '{_seleccionado.Username}' (ID: {_seleccionado.Id})?",
            yesText: "Eliminar",
            cancelText: "Cancelar");

        if (ok != true) return;

        var resp = await usuariosRepository.DeleteAsync(_seleccionado.Id);
        if (!resp.Error)
        {
            // refrescar lista
            await CargarUsuariosAsync();
            _seleccionado = null;
        }
        else
        {
            // opcional: mostrar mensaje si tu Response trae texto
            Console.WriteLine("Error al eliminar usuario");
        }
    }

}
